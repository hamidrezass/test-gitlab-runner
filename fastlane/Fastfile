require 'json'
require 'net/http'
require 'uri'
require 'time'

default_platform(:android)
platform :android do

  before_all do
    ENV["SLACK_URL"]
    ENV["VERSION_NAME"] ||= `grep -E 'versionName "' app/build.gradle | cut -d '"' -f2`.strip
  end

    desc "nonInstrumental unit test"
    lane :unitTest do
      gradle(task: "testDebugUnitTest")
    end


    desc "instrumental  Android  test"
    lane :androidTest do
      gradle(task: "connectedDebugAndroidTest")
    end


   desc "Submit a new Beta Build to Slack"
   lane :build do
    gradle(task: "clean assembleDebug")
    upload_to_slack()
  end




  def upload_to_slack
    file_path = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    file_name = generate_file_name
    file_size = File.size(file_path)
    initial_comment = generate_initial_comment
    upload_details = get_slack_upload_url(file_name, file_size)

    upload_file_to_slack(file_path, upload_details["upload_url"])
    complete_slack_upload(upload_details["file_id"], file_name, initial_comment)
  end

  # generate the APK file name
  def generate_file_name
    "app-debug.#{ENV['VERSION_NAME']}.#{Time.now.strftime('%Y-%m-%d.%H:%M')}.apk"
  end

  # create the initial Slack comment
  def generate_initial_comment
       git_branch = ENV["GIT_BRANCH"]
       git_author = ENV["GIT_AUTHOR"]
       commit_message = ENV["COMMIT_MESSAGE"]
       merge_request_description = ENV["MERGE_REQUEST_DESCRIPTION"]

    <<~MESSAGE
      Hello everyone,
      The new build is ready with the following details:

      - **Git Branch:** #{git_branch}
      - **Commit Message:** #{commit_message}
      - **Git Author:** #{git_author}
      - **Merge Request Description:** #{merge_request_description}

      Thank you for your hard work!
    MESSAGE
  end

  # get the Slack upload URL
  def get_slack_upload_url(file_name, file_size)
    uri = URI("https://slack.com/api/files.getUploadURLExternal")
    response = Net::HTTP.post_form(uri, {
      "token" => ENV["ACCESS_TOKEN"],
      "filename" => file_name,
      "length" => file_size
    })

    parsed_response = JSON.parse(response.body)
    unless parsed_response["ok"]
      UI.user_error!("Error getting upload URL from Slack: #{parsed_response['error']}")
    end

    parsed_response
  end

  # upload the file to Slack
  def upload_file_to_slack(file_path, upload_url)
    sh "curl -X POST -F file=@#{file_path} #{upload_url}"
  end

  # complete the Slack upload
  def complete_slack_upload(file_id, file_name, initial_comment)
    uri = URI("https://slack.com/api/files.completeUploadExternal")
    request = Net::HTTP::Post.new(uri)
    request["Authorization"] = "Bearer #{ENV["ACCESS_TOKEN"]}"
    request["Content-Type"] = "application/json"
    request.body = {
      "files" => [{ "id" => file_id, "title" => file_name }],
      "channel_id" => ENV["CHANNEL_ID"],
      "initial_comment" => initial_comment
    }.to_json

    response = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) do |http|
      http.request(request)
    end

    parsed_response = JSON.parse(response.body)
    if parsed_response["ok"]
      UI.success("Successfully uploaded #{file_name} to Slack")
    else
      UI.user_error!("Error uploading file to Slack: #{parsed_response['error']}")
      end
    end
  end
